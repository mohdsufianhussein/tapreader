
package el.data.asn310;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "ThirdPartyInformation" )
    public class ThirdPartyInformation implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "ThirdPartyInformation" , isSet = false )
       public static class ThirdPartyInformationSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "thirdPartyNumber", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private AddressStringDigits thirdPartyNumber = null;
                
  
        @ASN1Element ( name = "clirIndicator", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ClirIndicator clirIndicator = null;
                
  
        
        public AddressStringDigits getThirdPartyNumber () {
            return this.thirdPartyNumber;
        }

        
        public boolean isThirdPartyNumberPresent () {
            return this.thirdPartyNumber != null;
        }
        

        public void setThirdPartyNumber (AddressStringDigits value) {
            this.thirdPartyNumber = value;
        }
        
  
        
        public ClirIndicator getClirIndicator () {
            return this.clirIndicator;
        }

        
        public boolean isClirIndicatorPresent () {
            return this.clirIndicator != null;
        }
        

        public void setClirIndicator (ClirIndicator value) {
            this.clirIndicator = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ThirdPartyInformationSequenceType;
        }

       private static IASN1PreparedElementData preparedData_ThirdPartyInformationSequenceType = CoderFactory.getInstance().newPreparedElementData(ThirdPartyInformationSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "ThirdPartyInformation", isOptional =  false , hasTag =  true, tag = 219, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private ThirdPartyInformationSequenceType  value;        

        
        
        public ThirdPartyInformation () {
        }
        
        
        
        public void setValue(ThirdPartyInformationSequenceType value) {
            this.value = value;
        }
        
        
        
        public ThirdPartyInformationSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ThirdPartyInformation.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            