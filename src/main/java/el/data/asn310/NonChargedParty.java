
package el.data.asn310;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "NonChargedParty" )
    public class NonChargedParty implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "NonChargedParty" , isSet = false )
       public static class NonChargedPartySequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "nonChargedNumber", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private AddressStringDigits nonChargedNumber = null;
                
  
        @ASN1Element ( name = "calledNumAnalysisCode", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private CalledNumAnalysisCode calledNumAnalysisCode = null;
                
  
        
        public AddressStringDigits getNonChargedNumber () {
            return this.nonChargedNumber;
        }

        
        public boolean isNonChargedNumberPresent () {
            return this.nonChargedNumber != null;
        }
        

        public void setNonChargedNumber (AddressStringDigits value) {
            this.nonChargedNumber = value;
        }
        
  
        
        public CalledNumAnalysisCode getCalledNumAnalysisCode () {
            return this.calledNumAnalysisCode;
        }

        
        public boolean isCalledNumAnalysisCodePresent () {
            return this.calledNumAnalysisCode != null;
        }
        

        public void setCalledNumAnalysisCode (CalledNumAnalysisCode value) {
            this.calledNumAnalysisCode = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_NonChargedPartySequenceType;
        }

       private static IASN1PreparedElementData preparedData_NonChargedPartySequenceType = CoderFactory.getInstance().newPreparedElementData(NonChargedPartySequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "NonChargedParty", isOptional =  false , hasTag =  true, tag = 158, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private NonChargedPartySequenceType  value;        

        
        
        public NonChargedParty () {
        }
        
        
        
        public void setValue(NonChargedPartySequenceType value) {
            this.value = value;
        }
        
        
        
        public NonChargedPartySequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(NonChargedParty.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            