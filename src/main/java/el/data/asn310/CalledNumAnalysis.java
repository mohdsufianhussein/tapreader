
package el.data.asn310;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "CalledNumAnalysis" )
    public class CalledNumAnalysis implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "CalledNumAnalysis" , isSet = false )
       public static class CalledNumAnalysisSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "calledNumAnalysisCode", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private CalledNumAnalysisCode calledNumAnalysisCode = null;
                
  
        @ASN1Element ( name = "countryCodeTable", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private CountryCodeList countryCodeTable = null;
                
  
        @ASN1Element ( name = "iacTable", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private IacList iacTable = null;
                
  
        
        public CalledNumAnalysisCode getCalledNumAnalysisCode () {
            return this.calledNumAnalysisCode;
        }

        
        public boolean isCalledNumAnalysisCodePresent () {
            return this.calledNumAnalysisCode != null;
        }
        

        public void setCalledNumAnalysisCode (CalledNumAnalysisCode value) {
            this.calledNumAnalysisCode = value;
        }
        
  
        
        public CountryCodeList getCountryCodeTable () {
            return this.countryCodeTable;
        }

        
        public boolean isCountryCodeTablePresent () {
            return this.countryCodeTable != null;
        }
        

        public void setCountryCodeTable (CountryCodeList value) {
            this.countryCodeTable = value;
        }
        
  
        
        public IacList getIacTable () {
            return this.iacTable;
        }

        
        public boolean isIacTablePresent () {
            return this.iacTable != null;
        }
        

        public void setIacTable (IacList value) {
            this.iacTable = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_CalledNumAnalysisSequenceType;
        }

       private static IASN1PreparedElementData preparedData_CalledNumAnalysisSequenceType = CoderFactory.getInstance().newPreparedElementData(CalledNumAnalysisSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "CalledNumAnalysis", isOptional =  false , hasTag =  true, tag = 246, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private CalledNumAnalysisSequenceType  value;        

        
        
        public CalledNumAnalysis () {
        }
        
        
        
        public void setValue(CalledNumAnalysisSequenceType value) {
            this.value = value;
        }
        
        
        
        public CalledNumAnalysisSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(CalledNumAnalysis.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            