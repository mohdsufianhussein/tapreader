
package el.data.asn310;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "RecEntityInformation" )
    public class RecEntityInformation implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "RecEntityInformation" , isSet = false )
       public static class RecEntityInformationSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "recEntityCode", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private RecEntityCode recEntityCode = null;
                
  
        @ASN1Element ( name = "recEntityType", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private RecEntityType recEntityType = null;
                
  
        @ASN1Element ( name = "recEntityId", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private RecEntityId recEntityId = null;
                
  
        
        public RecEntityCode getRecEntityCode () {
            return this.recEntityCode;
        }

        
        public boolean isRecEntityCodePresent () {
            return this.recEntityCode != null;
        }
        

        public void setRecEntityCode (RecEntityCode value) {
            this.recEntityCode = value;
        }
        
  
        
        public RecEntityType getRecEntityType () {
            return this.recEntityType;
        }

        
        public boolean isRecEntityTypePresent () {
            return this.recEntityType != null;
        }
        

        public void setRecEntityType (RecEntityType value) {
            this.recEntityType = value;
        }
        
  
        
        public RecEntityId getRecEntityId () {
            return this.recEntityId;
        }

        
        public boolean isRecEntityIdPresent () {
            return this.recEntityId != null;
        }
        

        public void setRecEntityId (RecEntityId value) {
            this.recEntityId = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_RecEntityInformationSequenceType;
        }

       private static IASN1PreparedElementData preparedData_RecEntityInformationSequenceType = CoderFactory.getInstance().newPreparedElementData(RecEntityInformationSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "RecEntityInformation", isOptional =  false , hasTag =  true, tag = 183, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private RecEntityInformationSequenceType  value;        

        
        
        public RecEntityInformation () {
        }
        
        
        
        public void setValue(RecEntityInformationSequenceType value) {
            this.value = value;
        }
        
        
        
        public RecEntityInformationSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(RecEntityInformation.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            