
package el.data.asn311;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "MinChargeableSubscriber" )
    public class MinChargeableSubscriber implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "MinChargeableSubscriber" , isSet = false )
       public static class MinChargeableSubscriberSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "min", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private Min min = null;
                
  
        @ASN1Element ( name = "mdn", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private Mdn mdn = null;
                
  
        
        public Min getMin () {
            return this.min;
        }

        
        public boolean isMinPresent () {
            return this.min != null;
        }
        

        public void setMin (Min value) {
            this.min = value;
        }
        
  
        
        public Mdn getMdn () {
            return this.mdn;
        }

        
        public boolean isMdnPresent () {
            return this.mdn != null;
        }
        

        public void setMdn (Mdn value) {
            this.mdn = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_MinChargeableSubscriberSequenceType;
        }

       private static IASN1PreparedElementData preparedData_MinChargeableSubscriberSequenceType = CoderFactory.getInstance().newPreparedElementData(MinChargeableSubscriberSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "MinChargeableSubscriber", isOptional =  false , hasTag =  true, tag = 254, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private MinChargeableSubscriberSequenceType  value;        

        
        
        public MinChargeableSubscriber () {
        }
        
        
        
        public void setValue(MinChargeableSubscriberSequenceType value) {
            this.value = value;
        }
        
        
        
        public MinChargeableSubscriberSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MinChargeableSubscriber.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            