
package el.data.asn312;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "BasicServiceUsed" )
    public class BasicServiceUsed implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "BasicServiceUsed" , isSet = false )
       public static class BasicServiceUsedSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "basicService", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private BasicService basicService = null;
                
  
        @ASN1Element ( name = "chargingTimeStamp", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ChargingTimeStamp chargingTimeStamp = null;
                
  
        @ASN1Element ( name = "chargeInformationList", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ChargeInformationList chargeInformationList = null;
                
  
        @ASN1Element ( name = "hSCSDIndicator", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private HSCSDIndicator hSCSDIndicator = null;
                
  
        
        public BasicService getBasicService () {
            return this.basicService;
        }

        
        public boolean isBasicServicePresent () {
            return this.basicService != null;
        }
        

        public void setBasicService (BasicService value) {
            this.basicService = value;
        }
        
  
        
        public ChargingTimeStamp getChargingTimeStamp () {
            return this.chargingTimeStamp;
        }

        
        public boolean isChargingTimeStampPresent () {
            return this.chargingTimeStamp != null;
        }
        

        public void setChargingTimeStamp (ChargingTimeStamp value) {
            this.chargingTimeStamp = value;
        }
        
  
        
        public ChargeInformationList getChargeInformationList () {
            return this.chargeInformationList;
        }

        
        public boolean isChargeInformationListPresent () {
            return this.chargeInformationList != null;
        }
        

        public void setChargeInformationList (ChargeInformationList value) {
            this.chargeInformationList = value;
        }
        
  
        
        public HSCSDIndicator getHSCSDIndicator () {
            return this.hSCSDIndicator;
        }

        
        public boolean isHSCSDIndicatorPresent () {
            return this.hSCSDIndicator != null;
        }
        

        public void setHSCSDIndicator (HSCSDIndicator value) {
            this.hSCSDIndicator = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_BasicServiceUsedSequenceType;
        }

       private static IASN1PreparedElementData preparedData_BasicServiceUsedSequenceType = CoderFactory.getInstance().newPreparedElementData(BasicServiceUsedSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "BasicServiceUsed", isOptional =  false , hasTag =  true, tag = 39, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private BasicServiceUsedSequenceType  value;        

        
        
        public BasicServiceUsed () {
        }
        
        
        
        public void setValue(BasicServiceUsedSequenceType value) {
            this.value = value;
        }
        
        
        
        public BasicServiceUsedSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(BasicServiceUsed.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            