
package el.data.asn312;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "CurrencyConversion" )
    public class CurrencyConversion implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "CurrencyConversion" , isSet = false )
       public static class CurrencyConversionSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "exchangeRateCode", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ExchangeRateCode exchangeRateCode = null;
                
  
        @ASN1Element ( name = "numberOfDecimalPlaces", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private NumberOfDecimalPlaces numberOfDecimalPlaces = null;
                
  
        @ASN1Element ( name = "exchangeRate", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ExchangeRate exchangeRate = null;
                
  
        
        public ExchangeRateCode getExchangeRateCode () {
            return this.exchangeRateCode;
        }

        
        public boolean isExchangeRateCodePresent () {
            return this.exchangeRateCode != null;
        }
        

        public void setExchangeRateCode (ExchangeRateCode value) {
            this.exchangeRateCode = value;
        }
        
  
        
        public NumberOfDecimalPlaces getNumberOfDecimalPlaces () {
            return this.numberOfDecimalPlaces;
        }

        
        public boolean isNumberOfDecimalPlacesPresent () {
            return this.numberOfDecimalPlaces != null;
        }
        

        public void setNumberOfDecimalPlaces (NumberOfDecimalPlaces value) {
            this.numberOfDecimalPlaces = value;
        }
        
  
        
        public ExchangeRate getExchangeRate () {
            return this.exchangeRate;
        }

        
        public boolean isExchangeRatePresent () {
            return this.exchangeRate != null;
        }
        

        public void setExchangeRate (ExchangeRate value) {
            this.exchangeRate = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_CurrencyConversionSequenceType;
        }

       private static IASN1PreparedElementData preparedData_CurrencyConversionSequenceType = CoderFactory.getInstance().newPreparedElementData(CurrencyConversionSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "CurrencyConversion", isOptional =  false , hasTag =  true, tag = 106, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private CurrencyConversionSequenceType  value;        

        
        
        public CurrencyConversion () {
        }
        
        
        
        public void setValue(CurrencyConversionSequenceType value) {
            this.value = value;
        }
        
        
        
        public CurrencyConversionSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(CurrencyConversion.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            