
package el.data.asn312;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "GprsServiceUsed" )
    public class GprsServiceUsed implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "GprsServiceUsed" , isSet = false )
       public static class GprsServiceUsedSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "iMSSignallingContext", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private IMSSignallingContext iMSSignallingContext = null;
                
  
        @ASN1Element ( name = "dataVolumeIncoming", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private DataVolumeIncoming dataVolumeIncoming = null;
                
  
        @ASN1Element ( name = "dataVolumeOutgoing", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private DataVolumeOutgoing dataVolumeOutgoing = null;
                
  
        @ASN1Element ( name = "chargeInformationList", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ChargeInformationList chargeInformationList = null;
                
  
        
        public IMSSignallingContext getIMSSignallingContext () {
            return this.iMSSignallingContext;
        }

        
        public boolean isIMSSignallingContextPresent () {
            return this.iMSSignallingContext != null;
        }
        

        public void setIMSSignallingContext (IMSSignallingContext value) {
            this.iMSSignallingContext = value;
        }
        
  
        
        public DataVolumeIncoming getDataVolumeIncoming () {
            return this.dataVolumeIncoming;
        }

        
        public boolean isDataVolumeIncomingPresent () {
            return this.dataVolumeIncoming != null;
        }
        

        public void setDataVolumeIncoming (DataVolumeIncoming value) {
            this.dataVolumeIncoming = value;
        }
        
  
        
        public DataVolumeOutgoing getDataVolumeOutgoing () {
            return this.dataVolumeOutgoing;
        }

        
        public boolean isDataVolumeOutgoingPresent () {
            return this.dataVolumeOutgoing != null;
        }
        

        public void setDataVolumeOutgoing (DataVolumeOutgoing value) {
            this.dataVolumeOutgoing = value;
        }
        
  
        
        public ChargeInformationList getChargeInformationList () {
            return this.chargeInformationList;
        }

        
        public boolean isChargeInformationListPresent () {
            return this.chargeInformationList != null;
        }
        

        public void setChargeInformationList (ChargeInformationList value) {
            this.chargeInformationList = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_GprsServiceUsedSequenceType;
        }

       private static IASN1PreparedElementData preparedData_GprsServiceUsedSequenceType = CoderFactory.getInstance().newPreparedElementData(GprsServiceUsedSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "GprsServiceUsed", isOptional =  false , hasTag =  true, tag = 121, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private GprsServiceUsedSequenceType  value;        

        
        
        public GprsServiceUsed () {
        }
        
        
        
        public void setValue(GprsServiceUsedSequenceType value) {
            this.value = value;
        }
        
        
        
        public GprsServiceUsedSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(GprsServiceUsed.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            